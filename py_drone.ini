# sample configuration file for py_drone_simulator
# Chris Sweet, 07/03/20
[DEFAULT]
host_name = http://127.0.0.1:5000
base = ${host_name}/id/
debug = True
cors = False
port = 5000
yasgui_heading = LANDRS Drone SPARQL Interface

#logging CRITICAL 50,ERROR 40,WARNING 30,INFO 20,DEBUG 10,NOTSET 0
logging_level = 20
logging_file = landrs.log

[DRONE]
drone_uuid = MjlmNmVmZTAtNGU1OS00N2I4LWI3MzYtODZkMDQ0MTRiNzcxCg==
input_shape = Drone_shape
graph_boundary = graph_boundary
drone = http://127.0.0.1:5000/id/MjlmNmVmZTAtNGU1OS00N2I4LWI3MzYtODZkMDQ0MTRiNzcxCg==
name = Original Drone

[GRAPH]
name = landrs_test
db_location = db/${name}

#for Pricila's repo
file = ../landrsOntTest/
#sample file
#file = ttl/base.ttl

file_format = ttl
file_reload = False

# check created instances with pyshacl?
pyshacl = False

# shacl filenames
shacl_filename = *shape.${file_format}
shacl_constraint_filename = *shapes.${file_format}
flight_shacl_filename = ttl/

# ontology filename
ontology_filename = ontology.${file_format}

[MAVLINK]
# default comms port
address = tcp:127.0.0.1:5761

#storage rate in seconds
rate = 10
# list ports on main screen
list_ports = True

# current selections, overwritten by contents of py_drone_dynamic.ini
observation_collection = http://127.0.0.1:5000/id/Mzg2ODAzQTctQ0VCNi00MkJGLUFDNjYtRkU4QTVBQThBMzZBCg==
dataset = http://127.0.0.1:5000/id/QUjJtYurQx2ZEq0Yfl6OnA
sensor = http://127.0.0.1:5000/id/Y2U1YThiZTYtZTljMC00ZWY3LTlmMzItZGZhZDk4MTJkNDExCg==

[FLIGHT]
# substitutions during form processing
this_uav = ${DEFAULT:base}${DRONE:drone_uuid}
this_uav_mode = SUBSTITUTE
mission_file = ../ardupilot/Tools/autotest/ArduPlane_Tests/Mission/
mission_file_mode = FILES
geometry = mission_file
geometry_mode = GEOMETRY
name_substutute = flight

# flight name, overwritten by contents of py_drone_dynamic.ini
flight = Original

# Obs. col. id, dataset id definitions, must tie up with shacl
flight_collection = the_observation_collection
flight_dataset = the_dataset

# shape label to generate form/sub graph
input_shape = Flight_shape
# shape label for post user form processing
constraint_shape = Flight_constraint
# shape label used for generating sub-graphs for storage points
flight_store_shape = Store_shape
# shape label used for finalizing store sequence
flight_store_shape_end = Store_shape_end

# shape label for graph 'boundary condition' edges
graph_boundary = graph_boundary

# sensor label during storage
flight_sensor_label = sensor_label
# sensor label during form/sub graph generation
flight_sensor = sensor
# label for values generated via sensor
flight_sensor_value = sensor_quantity
# label for geo fix at reading time
flight_geo_fix = sensor_quantity_geo_fix
# start time/current time label
flight_time_stamp = startTime
# end of sequence time label
flight_time_stamp_end = endTime

